---
- name: 'Ensure duplicity config path'
  file:
    path: '/root/.duplicity'
    state: directory

- name: 'Ensure duplicity config path; credentials'
  file:
    path: '/root/.duplicity/credentials'
    state: touch

- name: 'Ensure duplicity config path; excludes'
  file:
    path: '/root/.duplicity/excludes'
    state: touch

- name: 'Ensure duplicity config path; gdrive.cache'
  file:
    path: '/root/gdrive.cache'
    state: touch

- name: 'Ensure duplicity OneDrive credentials'
  copy:
    content: |
      client_config_backend: settings
      client_config:
        client_id: "{{ gdrive.client_id }}"
        client_secret: "{{ gdrive.client_secret }}"
      save_credentials: True
      save_credentials_backend: file
      save_credentials_file: /root/gdrive.cache
      get_refresh_token: True
    dest: '/root/.duplicity/credentials'

- name: 'Ensure duplicity config'
  copy:
    content: '{{ gdrive.cache }}'
    dest: '/root/gdrive.cache'

- name: 'Ensure backup script on host'
  copy:
    content: |
      #!/bin/bash
      for VM in $(qm list --full | 
      awk '/vm.netsoc.co/ { if ($2 ~ !/"{{ blacklist | join('|') }}"/) { printf "%s\n\n", $1; } }') ;
        do CONF=`pvesh get /nodes/$(hostname -s)/qemu/$VM/config --output-format=json` &&
          [[ `echo $CONF | jq .virtio0` != "null" ]] && [[ `echo $CONF | jq .virtio0` != *"backup=0"* ]] && pvesh set /nodes/$(hostname -s)/qemu/$VM/config -virtio0 `echo $CONF | jq -r .virtio0`,backup=0 && sleep 5;
          [[ `echo $CONF | jq .virtio1` != "null" ]] && 
          echo "Backing up $VM" && MDIR="/backups/$(echo $CONF | jq -r .name)" && 
          mkdir -p $MDIR && vzdump --compress {{ compress }} $VM --mode {{ mode }} --dumpdir $MDIR --exclude-path /boot ||
            curl -H "Content-Type: application/json" -X POST -d "{\"username": \"$(hostname -s)\", \"content\": \"Error backing up VM $VM\"}" {{ webhooks.discord }};
        done;
        GOOGLE_DRIVE_SETTINGS=~/.duplicity/credentials duplicity --exclude-filelist ~/.duplicity/excludes /backups gdocs://{{ gdrive.user_id }}/{{ gdrive.location }} --no-encryption || 
          curl -H "Content-Type: application/json" -X POST -d "{\"username\": \"$(hostname -s)\", \"content\": \"Error syncing with Google Drive. You may need to update the refresh token in ansible vault :/\"}" {{ webhooks.discord }}; 
        curl -H "Content-Type: application/json" -X POST -d "{\"username\": \"$(hostname -s)\", \"content\": \"VM backups completed\"}" {{ webhooks.discord }}
        rm -rf /root/.duplicity # remove after termination
        rm /root/gdrive.cache
    dest: /root/backup.sh
    mode: '0755'

- name: 'Ensure backup cron job on each host'
  cron:
    user: 'root'
    name: 'Run VZdump and duplicity for {{ item }}'
    hour: '{{ backup_hour }}'
    minute: '0'
    job: >
      bash -c "
      scp -r -i {{ nac }}/keys/{{ control.name }}/id_rsa -P {{ control.port }} /root/.duplicity root@{{ control.host }}:/root/.duplicity &&
      ssh -i {{ nac }}/keys/{{ control.name }}/id_rsa root@{{ control.host }} -p {{ control.port }} '
        scp -r /root/.duplicity root@{{ item }}:/root/.duplicity &&
        ssh -i {{ nac }}/keys/{{ item }}/id_rsa root@{{ item }} \'bash -s\' < /root/backup.sh &&
        /root/backup.sh
      '"
  when: item != control.name
  loop: "{{ groups['proxmox_hosts'] }}"
