---
- name: "Ensure duplicity"
  apt:
    name: duplicity
    state: latest
    update_cache: yes

- name: "Ensure jq"
  apt:
    name: jq
    state: latest

- name: "Ensure duplicity config path; credentials"
  file:
    path: "/root/.duplicity/credentials"

- name: "Ensure duplicity config path; excludes"
  file:
    path: "/root/.duplicity/excludes"

- name: "Ensure pydrive for duplicity"
  pip:
    name: pydrive

- name: "Ensure duplicity config path; gdrive.cache"
  file:
    path: "/root/.duplicity/gdrive.cache"

- name: "Ensure duplicity OneDrive credentials"
  copy:
    content: |
      {
        "token_type": "bearer",
        "expires_in": 36000,
        "scope": [
          "Files.Read",
          "Files.ReadWrite",
          "User.Read"
        ],
        "access_token": "{{ onedrive_access_token }}",
        "refresh_token": "{{ onedrive_refresh_token }}",
        "user_id": "{{ onedrive_user_id }}",
        "expires_at": 1996659305.829954
      }
    

- name: "Ensure duplicity config"
  copy:
    content: |
      # Folder to backup
      ROOT="/backup"
      # Destination
      DEST="onedrive://{{ onedrive_location }}"

      # Password for ssh key
      FTP_PASSWORD="SSHTest1!"

      INCLIST=( "*" )
      EXCLIST=( "" )

      #Passphrase for Signing key
      PASSPHRASE="{{ backup_sign_key_passphrase }}"
      # Encryption key
      GPG_ENC_KEY="{{ backup_encryption_key }}"
      # Signing key
      GPG_SIGN_KEY="{{ backup_sign_key }}"

      STATIC_OPTIONS="--full-if-older-than 14D --s3-use-new-style"

      LOGDIR="/var/log/"
      LOG_FILE="duplicity-$(date +%Y-%m-%d_%H-%M).txt"
      LOG_FILE_OWNER="root:root"
    dest: "/root/.duplicity/duplicity-backup.conf"


- name: "Ensure backup script on host"
  copy:
    content: |
      #!/bin/bash
      for VM in $(qm list --full | 
      awk '/vm.netsoc.co/ { if ($2 != "{{ blacklist }}") { printf "%s\n\n", $1; } }') ;
        do CONF=`pvesh get /nodes/$(hostname -s)/qemu/$VM/config --output-format=json` &&
          [[ `echo $CONF | jq .virtio0` != "null" ]] && [[ `echo $CONF | jq .virtio0` != *"backup=0"* ]] && pvesh set /nodes/$(hostname -s)/qemu/$VM/config -virtio0 `echo $CONF | jq -r .virtio0`,backup=0 && sleep 5;
          [[ `echo $CONF | jq .virtio1` != "null" ]] && 
          echo "Backing up $VM" && MDIR="/backup/$(echo $CONF | jq -r .name)" && 
          mkdir -p $MDIR && vzdump --compress {{ compress }} $VM --mode snapshot --dumpdir $MDIR --exclude-path /boot ||
            curl -H "Content-Type: application/json" -X POST -d '{"username": "$(hostname -s)", "content": "Error backing up VM $VM"}' {{ discord_webhook_url }};
        done;
        duplicity-backup.sh --config /root/.dupliticy/duplicity-backup.conf --full || 
          curl -H "Content-Type: application/json" -X POST -d '{"username": "$(hostname -s)", "content": "Error syncing with OneDrive. You may need to update the refresh token in ansible vault :/"}' {{ discord_webhook_url }}; 
        curl -H "Content-Type: application/json" -X POST -d '{"username": "$(hostname -s)", "content": "VM backups completed"}' {{ discord_webhook_url }}
        rm -rf /root/.duplicity # remove after termination
    dest: /root/backup.sh
    mode: '0755'

- name: "Ensure backup cron job on each host"
  cron:
    user: "root"
    name: "Run VZdump and duplicity"
    hour: "{{ backup_hour }}"
    minute: "0"
    job: >
      bash -c "
      scp -r -i /root/NaC/keys/{{ item }}/id_rsa /root/.duplicity netsoc@{{ item }}:/root/.duplicity &&
      ssh -i /root/NaC/keys/{{ item }}/id_rsa netsoc@{{ item }} 'bash -s' < /root/backup.sh"
  loop: "{{ proxmox_hosts }}"
