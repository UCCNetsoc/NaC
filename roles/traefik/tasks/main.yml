---

- name: Ensure /netsoc-neo/docker-data/traefik created with 0775
  become: yes
  file:
    path: /netsoc-neo/docker-data/traefik
    owner: root
    group: root
    mode: 0770
    state: directory

- name: Ensure /netsoc-neo/docker-data/traefik/dynamic_config created with 0775
  become: yes
  file:
    path: /netsoc-neo/docker-data/traefik/dynamic_config
    owner: root
    group: root
    mode: 0770
    state: directory

####################################################
## START FOR LOCALHOST ANSIBLE TESTING PURPOSES ####
####################################################

- name: Ensure python OpenSSL dependencies are installed.
  become: yes
  when: "'lxc' in ansible_virtualization_type"
  pip:
    name: pyOpenSSL
    state: present

- name: Generate localhost key
  become: yes
  when: "'lxc' in ansible_virtualization_type"
  openssl_privatekey:
    path: /netsoc-neo/docker-data/traefik/localhost.key

- name: Generate localhost CSR
  become: yes
  when: "'lxc' in ansible_virtualization_type"
  openssl_csr:
    path: /netsoc-neo/docker-data/traefik/localhost.csr
    privatekey_path: /netsoc-neo/docker-data/traefik/localhost.key
    common_name: '*.netsoc.*.localhost'

- name: Generate localhost certs if in development
  become: yes
  when: "'lxc' in ansible_virtualization_type"
  openssl_certificate:
    provider: selfsigned
    path: /netsoc-neo/docker-data/traefik/localhost.cert
    privatekey_path: /netsoc-neo/docker-data/traefik/localhost.key
    csr_path: /netsoc-neo/docker-data/traefik/localhost.csr

####################################################
### END FOR LOCALHOST ANSIBLE TESTING PURPOSES #####
####################################################

- name: Sync template files for /netsoc-neo/docker-data/traefik/dynamic_config/* to /traefik/dynamic_config/"
  become: yes
  template:
    src: "{{ item.src }}"
    dest: "/netsoc-neo/docker-data/traefik/dynamic_config/{{ item.path | replace('.j2', '') }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
    backup: yes
  with_filetree:
    - templates/dynamic_config/
  when: item.state == "file"

- name: Copy Traefik Static Config
  become: yes
  template:
    src: static_config.toml.j2
    dest: /netsoc-neo/docker-data/traefik/static_config.toml

- name: Ensure Cloudflare DNS token in Docker Swarm Secrets
  run_once: true
  become: yes
  docker_secret:
    name: cloudflare_dns_api_token.txt
    data: "{{ cloudflare_dns_api_token }}"
  register: result
  ignore_errors: true

- name: Remove Docker Secret from Swarm Service to update the Secret
  become: yes
  docker_stack:
    state: absent
    absent_retries: 5
    name: cloudflare_dns_api_token.txt
  when: result is failed

- name: Retry setting Consul Config in Docker Swarm Secrets if necessary
  run_once: true
  when: result is failed
  become: yes
  docker_secret:
    name: cloudflare_dns_api_token.txt
    data: "{{ cloudflare_dns_api_token }}"


- name: Ensure Traefik Docker network
  become: yes
  docker_network:
    name: traefik
    driver: overlay
    attachable: yes

- name: Ensure Traefik Docker container
  become: yes
  docker_stack:
    state: present
    name: traefik
    compose:
      - version: "3.5"
        services:
          server:
            image: traefik:2.2.0
            ports:
              - target: 80
                published: 80
                protocol: tcp
                mode: host
              - target: 443
                published: 443
                protocol: tcp
                mode: host
              #- target: 8080
              #  published: 8080
              #  protocol: tcp
              #  mode: host
            networks:
              traefik:
            deploy:
              mode: global
              placement:
                constraints:
                  - node.role == manager
                  - node.hostname == {{ inventory_hostname }}
                preferences:
                  - spread: node.id
              restart_policy:
                condition: any
                delay: 2s
                max_attempts: 5
              update_config:
                order: stop-first
                failure_action: rollback
              labels:
                # global redirect to https
                - "traefik.enable=true"
                - "traefik.docker.network=traefik"
                - "traefik.http.routers.https-redirect.entrypoints=web"
                - "traefik.http.routers.https-redirect.rule=HostRegexp(`{any:.*}`)"
                - "traefik.http.routers.https-redirect.middlewares=https-redirect"
                - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
                - "traefik.http.middlewares.https-redirect.redirectscheme.port=443"
                - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

                # passworded dashboard
                - "traefik.http.routers.dashboard.entrypoints=web-secure"
                - "traefik.http.routers.dashboard.rule=Host(`traefik.{{ dev_site }}`)"
                - "traefik.http.routers.dashboard.tls"
                - "traefik.http.routers.dashboard.service=dashboard-service"
                - "traefik.http.services.dashboard-service.loadbalancer.server.port=8080"
                - "traefik.http.middlewares.dashboard-auth.basicauth.users={{ traefik_basic_auth }}"
                - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - /netsoc-neo/docker-data/traefik/:/traefik/
            command: traefik --configFile=/traefik/static_config.toml
            secrets:
              - "cloudflare_dns_api_token.txt"
            environment:
              CLOUDFLARE_DNS_API_TOKEN_FILE: "/run/secrets/cloudflare_dns_api_token.txt"
        secrets:
          cloudflare_dns_api_token.txt:
            external: true
        networks:
          traefik:
            external: true