---

- name: Ensure pterodactyl database
  become: yes
  mysql_db:
    login_host: "{{ mysql_server }}"
    login_user: "{{ mysql_admin_username }}"
    login_password: "{{ mysql_admin_password }}"
    name: "{{ pterodactyl_mysql_database }}"
    state: present

- name: Ensure pterodactyl database user
  mysql_user:
    name: "{{ pterodactyl_mysql_user }}"
    host: "%"
    priv: "{{ pterodactyl_mysql_database }}.*:ALL"
    password: "{{ pterodactyl_mysql_password }}"
    login_host: "{{ mysql_server }}"
    login_user: "{{ mysql_admin_username }}"
    login_password: "{{ mysql_admin_password }}"
    state: present

- name: Ensure Pterodactyl mount directories
  become: yes
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0770
    state: directory
  with_items:
    - /netsoc-neo/docker-data/pterodactyl/
    - /netsoc-neo/docker-data/pterodactyl/data
    - /netsoc-neo/docker-data/pterodactyl/certs
    - /netsoc-neo/docker-data/pterodactyl-daemon
    - /netsoc-neo/docker-data/pterodactyl-daemon/config
    - /netsoc-neo/docker-data/pterodactyl-daemon/tmp
    - /netsoc-neo/docker-data/pterodactyl-daemon/packs
    - /netsoc-neo/docker-data/pterodactyl-daemon/data

- become: yes
  openssl_privatekey:
    path: /netsoc-neo/docker-data/pterodactyl/certs/cert.key
    size: 2048 

- become: yes
  openssl_csr:
    path: /netsoc-neo/docker-data/pterodactyl/certs/cert.csr
    privatekey_path: /netsoc-neo/docker-data/pterodactyl/certs/cert.key

- become: yes
  openssl_certificate:
    path: /netsoc-neo/docker-data/pterodactyl/certs/cert.crt
    privatekey_path: /netsoc-neo/docker-data/pterodactyl/certs/cert.key
    csr_path: /netsoc-neo/docker-data/pterodactyl/certs/cert.csr
    provider: selfsigned

- name: Ensure Pterodactyl  Docker network
  become: yes
  docker_network:
    name: pterodactyl 
    driver: overlay
    attachable: yes
    appends: yes

- name: Ensure daemon core.json
  become: yes
  template:
    src: templates/core.json
    dest: /netsoc-neo/docker-data/pterodactyl-daemon/config/core.json

- name: Ensure Pterodactyl Docker stack
  become: yes
  docker_stack:
    name: pterodactyl
    state: present
    compose:
      ##
      # Pterodactyl Panel Docker Setup by ccarney
      ##
      - version: "3.5"
        services:
          # Panel Cache
          # This service is required for the panel to function.
          # You can use either redis or memcached, but redis
          # is provided by default here.
          ##
          cache:
            image: redis:alpine
            networks:
              pterodactyl:
            restart: always

          ##
          # Pterodactyl Panel
          # This is the main service that will be seen publically.
          ##
          panel:
            depends_on:
            - cache
            environment:
              SSL: "true"
              SSL_CERT: "/etc/certs/cert.crt"
              SSL_CERT_KEY: "/etc/certs/cert.key"

              # Disable's runtime workers & cronjob (this is useful if you want to run these in another container)
              DISABLE_WORKERS: "false"

              ##
              # Panel Variables
              # These variables can be used within pterodactyl.conf (.env when symlinked 
              # into the docker webroot). These variables are also set via pterodactyl:env
              # and pterodactyl:mail.
              ##
              APP_URL: "https://pterodactyl.netsoc.dev:443/"
              TIMEZONE: "UTC"

              CACHE_DRIVER: "redis"

              # Rely on an external source so we can put the panel container down when updates are needed
              REDIS_HOST: "cache"
              REDIS_PORT: "6379"

              DB_HOST: "{{ mysql_server }}"
              DB_PORT: "3306"
              DB_DATABASE: "{{ pterodactyl_mysql_database }}"
              DB_USERNAME: "{{ pterodactyl_mysql_user }}"
              DB_PASSWORD: "{{ pterodactyl_mysql_password }}"

              MAIL_DRIVER: "mail"
              MAIL_FROM: "admin@localhost"
              MAIL_FROM_NAME: "Pterodactyl Panel"

              DOCKER_ROOT: "/var/lib/docker"
              DOCKER_SOCKET: "/var/run/docker.sock"
            image: ccarney16/pterodactyl-panel:latest
            restart: always
            networks:
              pterodactyl:
              traefik:
            deploy:
              mode: global
              restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 5
              placement:
                constraints:
                  - node.hostname == {{ inventory_hostname }}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.pterodactyl.rule=Host(`pterodactyl.{{ dev_site }}`)"
                - "traefik.http.routers.pterodactyl.entrypoints=web-secure"
                - "traefik.http.routers.pterodactyl.tls.certResolver=letsencrypt"
                - "traefik.http.routers.pterodactyl.service=pterodactyl-service"
                - "traefik.http.services.pterodactyl-service.loadbalancer.server.port=443"
                - "traefik.http.services.pterodactyl-service.loadbalancer.server.scheme=https"
                - "traefik.docker.network=pterodactyl"
            volumes:
            - /netsoc-neo/docker-data/pterodactyl/data:/data
            - /netsoc-neo/docker-data/pterodactyl/certs:/etc/certs

          ##
          # Pterodactyl Daemon
          # If you don't plan on running the daemon on the same machine, 
          # you may comment/delete the section below.
          ##
          daemon:
            depends_on:
            - panel
            image: ccarney16/pterodactyl-daemon:latest
            networks:
              pterodactyl:
              traefik:
            privileged: true
            restart: always
            volumes:
              - /netsoc-neo/docker-data/pterodactyl-daemon/config:/srv/daemon/config
              - /netsoc-neo/docker-data/pterodactyl-daemon/config/core.json:/srv/daemon/config/core.json
              - /netsoc-neo/docker-data/pterodactyl-daemon/packs:/srv/daemon/packs
              - /netsoc-neo/docker-data/pterodactyl-daemon/data:/srv/daemon-data
              - /netsoc-neo/docker-data/pterodactyl-daemon/tmp:/tmp/pterodactyl
              - /netsoc-neo/docker-data/pterodactyl/certs/cert.key:/etc/certs/privkey.pem
              - /netsoc-neo/docker-data/pterodactyl/certs/cert.crt:/etc/certs/fullchain.pem

              - /etc/localtime:/etc/localtime
              # Docker socket and directory, needed to communicate to docker
              # NOTE: If you are using docker in a different directory, please change below to reflect that!
              - /var/lib/docker:/var/lib/docker
              - /var/run/docker.sock:/var/run/docker.sock
            ports:
              - 6969:8080
            # deploy:
            #   mode: global
            #   restart_policy:
            #     condition: on-failure
            #     delay: 5s
            #     max_attempts: 5
            #   labels:
            #     - "traefik.enable=true"
            #     - "traefik.http.routers.pterodactyl-daemon.rule=Host(`pterodactyl-daemon.{{ dev_site }})"
            #     - "traefik.http.routers.pterodactyl-daemon.entrypoints=web-secure"
            #     - "traefik.http.routers.pterodactyl-daemon.tls.certResolver=letsencrypt"
            #     - "traefik.http.routers.pterodactyl-daemon.service=pterodactyl-daemon-service"
            #     - "traefik.http.services.pterodactyl-daemon-service.loadbalancer.server.port=8080"
            #     - "traefik.http.services.pterodactyl-daemon-service.loadbalancer.server.scheme=https"
            #     - "traefik.docker.network=pterodactyl_net"
            #   placement:
            #     constraints:
            #       - node.hostname == {{ inventory_hostname }}
        networks:
          pterodactyl:
            name: pterodactyl 
            external: true
          traefik:
            name: traefik
            external: true
          