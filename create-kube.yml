---

- name: "Ensure Kube Master"
  hosts: leela
  roles:
    - role: proxmox-cloudinit-vm
      vars:
        vm:
          name: "master.k8s.netsoc.co"
          clone:
            pool: local
            qcow2_url: "https://cloud-images.ubuntu.com/releases/focal/release-20200921.1/ubuntu-20.04-server-cloudimg-amd64.img"
            qcow2_hash: sha256:d18a9d2b890d3c1401e70a281cae44b61816aa669c4936f7a99c168e572ec8cb
          cores: 4
          memory: 2048
          description:
            groups:
              - vm
              - ipaclients
            host_vars:
              ansible_ssh_private_key_file: "./keys/k8s/id_rsa"
          net:
            net0: "virtio={{ kube.master.net0.match.macaddress }},tag={{ vlan.k8s }},bridge={{ vmbr }}"
          disks:
            pool: local-lvm
            boot:
              size: 30G
              format: raw
            extra:
              - size: 45G
                format: raw
          efi:
            pool: local
          cloudinit:
            pool: local
            force: yes
            userdata: |
              #cloud-config
              preserve_hostname: false
              manage_etc_hosts: true
              fqdn: master.k8s.netsoc.co
              packages:
                - qemu-guest-agent
              runcmd:
                - [ systemctl, enable, qemu-guest-agent ]
                - [ systemctl, start, qemu-guest-agent, --no-block ]
              users:
                - name: netsoc
                  gecos: Netsoc Management User
                  primary_group: netsoc
                  groups: netsoc
                  shell: /bin/bash
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  ssh_authorized_keys:
                    - "{{ lookup('file', './keys/k8s/id_rsa.pub') }}"
              apt:
                preserve_sources_list: true
                primary:
                  - arches: [default]
                    uri: http://ie.archive.ubuntu.com/ubuntu/
                security:
                  - uri: http://security.ubuntu.com/ubuntu
              disk_setup:
                /dev/vdb:
                  table_type: 'gpt'
                  layout:
                    - [100,83] # 100% Linux fs
                  overwrite: false
              fs_setup:
                - label: data-disk
                  filesystem: ext4
                  device: '/dev/vdb1'
                  overwrite: false
              mounts:
                - [ vdb, /netsoc, auto ]
            networkconfig:
              version: 2
              ethernets: "{{ kube.master }}"
  vars_files:
    - vars/network.yml
    - vars/secrets_mapping.yml
    - vars/secrets.yml
  tags:
    - master

- name: "Ensure Kube Workers"
  hosts: proxmox_hosts
  roles:
    - role: proxmox-cloudinit-vm
      vars:
        vm:
          name: "worker{{ groups['proxmox_hosts'].index(inventory_hostname) }}.k8s.netsoc.co"
          clone:
            pool: local
            qcow2_url: "https://cloud-images.ubuntu.com/releases/focal/release-20200921.1/ubuntu-20.04-server-cloudimg-amd64.img"
            qcow2_hash: sha256:d18a9d2b890d3c1401e70a281cae44b61816aa669c4936f7a99c168e572ec8cb
          cores: 4
          memory: 2048
          description:
            groups:
              - vm
              - ipaclients
            host_vars:
              ansible_ssh_private_key_file: "./keys/k8s/id_rsa"
          net:
            net0: "virtio={{ (126235667136512 + groups['proxmox_hosts'].index(inventory_hostname)) | hwaddr('linux') }},tag={{ vlan.k8s }},bridge={{ vmbr }}"
          disks:
            pool: local-lvm
            boot:
              size: 30G
              format: raw
            extra:
              - size: 45G
                format: raw
          efi:
            pool: local
          cloudinit:
            pool: local
            force: yes
            userdata: |
              #cloud-config
              preserve_hostname: false
              manage_etc_hosts: true
              fqdn: worker{{ groups['proxmox_hosts'].index(inventory_hostname) }}.k8s.netsoc.co
              packages:
                - qemu-guest-agent
              runcmd:
                - [ systemctl, enable, qemu-guest-agent ]
                - [ systemctl, start, qemu-guest-agent, --no-block ]
              users:
                - name: netsoc
                  gecos: Netsoc Management User
                  primary_group: netsoc
                  groups: netsoc
                  shell: /bin/bash
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  ssh_authorized_keys:
                    - "{{ lookup('file', './keys/k8s/id_rsa.pub') }}"
              apt:
                preserve_sources_list: true
                primary:
                  - arches: [default]
                    uri: http://ie.archive.ubuntu.com/ubuntu/
                security:
                  - uri: http://security.ubuntu.com/ubuntu
              disk_setup:
                /dev/vdb:
                  table_type: 'gpt'
                  layout:
                    - [100,83] # 100% Linux fs
                  overwrite: false
              fs_setup:
                - label: data-disk
                  filesystem: ext4
                  device: '/dev/vdb1'
                  overwrite: false
              mounts:
                - [ vdb, /netsoc, auto ]
            networkconfig:
              version: 2
              ethernets:
                net0:
                  match:
                    macaddress: "{{ (126235667136512 + groups['proxmox_hosts'].index(inventory_hostname)) | hwaddr('linux') }}"
                  addresses:
                    - "{{ kube.worker.base_ip | ipmath(groups['proxmox_hosts'].index(inventory_hostname)) }}"
                  gateway4: "{{ gateway4.k8s }}"
                  nameservers: "{{ nameservers.public }}"
                  optional: true
                  link-local: []
  vars_files:
    - vars/network.yml
    - vars/secrets_mapping.yml
    - vars/secrets.yml
  tags:
    - workers

- name: "Reload inventory to pull new VMs"
  hosts: 127.0.0.1
  connection: local
  tasks:
    - meta: refresh_inventory
