# Setup Traefik
- name: "Ensure Traefik directory and file config"
  hosts: docker_swarm_managers[0]
  tasks:
    - name: Ensure Traefik file config dir on storage
      become: yes
      file:
        path: "{{ item }}"
        mode: '0770'
        state: directory
      with_items: # do not use recurse: yes because the /storage mount could have failed
        - /storage/docker/traefik
        - /storage/docker/traefik/file_config
    - set_fact:
        file_config:
          http:
            routers:
              ipa:
                entrypoints:
                  - web-secure
                rule: Host(`ipa.netsoc.dev`)
                middlewares:
                  - ipa-rewrite
                service: ipa
                tls:
                  certResolver: letsencrypt
              keycloak:
                entrypoints:
                  - web-secure
                rule: Host(`keycloak.netsoc.dev`)
                service: keycloak
                tls:
                  certResolver: letsencrypt
              admin-api:
                entrypoints:
                  - web-secure
                rule: Host(`api.netsoc.dev`)
                service: admin-api
                tls:
                  certResolver: letsencrypt
              admin-ui:
                entrypoints:
                  - web-secure
                rule: Host(`admin.netsoc.dev`)
                service: admin-ui
                tls:
                  certResolver: letsencrypt
              user-websites:
                entrypoints:
                  - web-secure
                priority: 1
                rule: Host(`*.netsoc.dev`)
                service: user-websites
                tls:
                  certResolver: letsencrypt
              discord-router:
                entrypoints:
                  - web-secure
                rule: Host(`discord.netsoc.co`)
                middlewares:
                  - discord-redirect
                service: unused
                tls:
                  certResolver: letsencrypt
              esports-router:
                entrypoints:
                  - web-secure
                rule: Host(`esports.netsoc.co`)
                middlewares:
                  - esports-redirect
                service: unused
                tls:
                  certResolver: letsencrypt
              prometheus:
                entrypoints:
                  - web-secure
                rule: Host(`prometheus.netsoc.dev`)
                middlewares:
                  - prometheus-auth
                service: prometheus
                tls:
                  certResolver: letsencrypt
              tutorial-router:
                entrypoints:
                  - web-secure
                rule: Host(`tutorial.netsoc.co`)
                middlewares:
                  - tutorial-redirect
                service: unused
                tls:
                  certResolver: letsencrypt

            middlewares:
              discord-redirect:
                redirectRegex:
                  regex: ^(.*)
                  replacement: 'https://discordapp.com/invite/qPUmuYw'
              esports-redirect:
                redirectRegex:
                  regex: ^(.*)
                  replacement: 'https://discordapp.com/invite/pDUv6Uj'
              ipa-rewrite:
                headers:
                  customRequestHeaders:
                    Host: ipa.vm.netsoc.co
                    Referer: https://ipa.vm.netsoc.co/ipa/
              prometheus-auth:
                basicAuth:
                  users:
                    - "{{ prometheus.username }}:{{ prometheus.password | password_hash('bcrypt') }}"
              tutorial-redirect:
                redirectRegex:
                  regex: ^(.*)
                  replacement: 'https://wiki.netsoc.co/en/services/tutorial'
                  permanent: true
                  
            services:
              ipa:
                loadBalancer:
                  servers:
                    - url: "https://admin.vm.netsoc.co"
              keycloak:
                loadBalancer:
                  servers:
                    - url: "http://admin.vm.netsoc.co:8080"
              admin-ui:
                loadBalancer:
                  servers:
                    - url: "http://admin.vm.netsoc.co:1021"
              admin-api:
                loadBalancer:
                  servers:
                    - url: "http://admin.vm.netsoc.co:1020"
              prometheus:
                loadBalancer:
                  servers:
                    - url: "http://prometheus.databases.vm.netsoc.co:9090"
              user-websites:
                loadBalancer:
                  services:
                    - url: "http://web0.vm.netsoc.co"
                    - url: "http://web1.vm.netsoc.co"
              unused:
                loadBalancer:
                  servers:
                    - url: 'https://google.com'

    - name: Write Traefik config
      become: yes
      copy:
        content: "{{ file_config | from_yaml }}"
        dest: /storage/docker/traefik/file_config/config.yml
  vars_files:
    - vars/secrets.yml
    - vars/prometheus.yml
  tags:
    - traefik-config
        
- name: Add python-consul
  hosts: docker_swarm
  tasks:
    - become: yes
      apt:
        name: python3-consul

- name: "Ensure Traefik loadbalancer running"
  hosts: docker_swarm_managers[0]
  become: yes
  roles:
    - role: traefik-proxmox
      vars:
        mount: "/storage/docker/traefik"
        dashboard_domain: traefik.netsoc.dev
        dashboard_basicauth: "{{ traefik.username }}:{{ traefik.password | password_hash('bcrypt') | replace('$', '$$') }}"
        config:
          log:
            level: DEBUG
          accessLog: {}
          entrypoints:
            web:
              address: ':80'
            web-secure:
              address: ':443'
            metrics:
              address: ':8082'
          metrics:
            prometheus:
              entrypoint: metrics
          serversTransport:
            insecureSkipVerify: true
          certificatesResolvers:
            letsencrypt:
              acme:
                email: netsoc@uccsocieties.ie
                storage: /traefik/acme.json
                dnsChallenge:
                  provider: cloudflare
                  delayBeforeCheck: 0
          providers:
            file:
              directory: /traefik/file_config/
              watch: true
            docker:
              swarmMode: true
              exposedByDefault: false
          api:
            dashboard: true
            insecure: true
  vars_files:
    - vars/network.yml
    - vars/cloudflare.yml
    - vars/secrets.yml
    - vars/traefik.yml

- name: "Ensure Portainer config dir"
  hosts: docker_swarm_managers[0]
  become: yes
  tasks:
    - name: Ensure Portainer config dir on NFS
      file:
        path: "{{ item }}"
        mode: '0755'
        state: directory
      with_items:
        - /storage/docker/portainer
  
- name: "Ensure Portainer"
  hosts: docker_swarm_managers[0]
  become: yes
  roles:
    - name: portainer
      vars:
        mount: /storage/docker/portainer
  vars_files:
    - vars/portainer.yml
    - vars/secrets.yml

- name: "Ensure Netsoc Static Services"
  hosts: docker_swarm_managers[0]
  become: yes
  roles:
    - netsoc.co
    - blog.netsoc.co

- name: "Create user and database for wiki.js"
  hosts: databases
  become: yes
  tasks:
    - postgresql_db:
        name: "{{ wikijs.postgres.db }}"
        state: present
        login_host: "{{ postgres.infra.host }}"
        login_password: "{{ postgres.infra.postgres_password }}"
    - postgresql_user:
        name: "{{ wikijs.postgres.username }}"
        password: "{{ wikijs.postgres.password }}"
        login_host: "{{ postgres.infra.host }}"
        login_password: "{{ postgres.infra.postgres_password }}"
    - postgresql_privs:
        db: "{{ wikijs.postgres.db }}"
        role: "{{ wikijs.postgres.username }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
        login_host: "{{ postgres.infra.host }}"
        login_password: "{{ postgres.infra.postgres_password }}"
  vars_files:
    - vars/postgres.yml
    - vars/wikijs.yml
    - vars/secrets.yml
      
- name: "Create wiki.js"
  hosts: docker_swarm_managers[0]
  roles:
    - role: wikijs
      vars:
        postgres:
          host: "{{ postgres.infra.host }}"
  vars_files:
    - vars/postgres.yml
    - vars/wikijs.yml
    - vars/secrets.yml

- name: Ensure Consul server directories for data
  hosts: docker_swarm
  become: yes
  tasks:
    - file:
        path: '/etc/consul'
        mode: 0770
        owner: 1000
        group: 1000
        state: directory 

- name: Ensure Consul
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
      - vars/consul.yml
      - vars/secrets.yml
  roles:
    - role: consul
      vars:
        mount: '/etc/consul/'
  tags: 
    - consul

- name: Ensure Consul settings set
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/netsocbot.yml
    - vars/consul.yml
    - vars/secrets.yml
  tasks:
    - include: roles/netsocbot/tasks/consul_conf.yml
  tags:
    - consul

- name: Deploy Netsoc Discord Bot
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/netsocbot.yml
    - vars/email.yml
    - vars/secrets.yml
    - vars/consul.yml
  roles: 
    - netsocbot
  tags:
    - bot

- name: Ensure Hashicorp Vault
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/consul.yml
    - vars/vault.yml
    - vars/ldap.yml
    - vars/secrets.yml
  roles:
    - vault
  tags:
    - server
    - vault

- name: Set Docker Registry secrets in Hashicorp Vault
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/vault.yml
    - vars/secrets.yml
    - vars/docker_hub.yml
  tasks:
    - include: roles/vault/tasks/secrets_docker_registry.yml
    - include: roles/vault/tasks/policy_ci.yml
  tags:
    - push_secrets
    - docker_registry
    - vault

- name: Set Github secrets in Hashicorp Vault
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/vault.yml
    - vars/secrets.yml
  tasks:
    - include: roles/vault/tasks/secrets_github.yml
    - include: roles/vault/tasks/policy_ci.yml
  tags:
    - push_secrets
    - github
    - vault

- name: Set Discord Webhook secrets in Hashicorp Vault
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/vault.yml
    - vars/discord.yml
    - vars/secrets.yml
  tasks:
    # Making sure the policy exists
    - include: roles/vault/tasks/policy_ci.yml 
    - include: roles/vault/tasks/secrets_discord_webhook.yml
  tags:
    - push_secrets
    - discord_webhook
    - vault

- name: Ensure Drone Server, Agent and DB
  hosts: docker_swarm_managers[0]
  become: yes
  vars_files:
    - vars/ci.yml
    - vars/discord.yml
    - vars/mysql.yml
    - vars/vault.yml
    - vars/secrets.yml
    - vars/network.yml
  vars:
    mysql_server: "{{ interfaces.databases.net0.addresses[0] | ipaddr('address') }}"
  roles:
    - ci
  tags:
    - ci

- name: Wetty
  hosts: docker_swarm_managers[0]
  become: yes
  roles:
    - wetty
  tags:
    - wetty
