- name: ssh
  import_playbook: requisite-ubuntu.yml

- name: Install LEMP
  hosts: container
  become: yes
  tasks:
    - name: Install packages
      package:
        name:
          - nginx
          - mysql-server
          - mysql-common
          - php7.4-fpm
          - php7.4-mysql
          - git
        state: latest

    - name: Secure MySQL installation (does the same as mysql_secure_installation)
      shell: |
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';" &&
        mysql -ppassword -e "DELETE FROM mysql.user WHERE User='';" &&
        mysql -ppassword -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');" &&
        mysql -ppassword -e "DROP DATABASE IF EXISTS test;DELETE FROM mysql.db WHERE Db='test' OR Db='test_%';" &&
        mysql -ppassword -e "DROP DATABASE IF EXISTS wp_database; DROP USER IF EXISTS 'wp_user'@localhost;" &&
        mysql -ppassword -e "FLUSH PRIVILEGES";

    - name: Tune MySQL performance to use low memory
      copy:
        dest: /etc/mysql/mysql.conf.d/mysqld.cnf
        content: |
          #
          # The MySQL database server configuration file.
          #
          # One can use all long options that the program supports.
          # Run program with --help to get a list of available options and with
          # --print-defaults to see which it would actually understand and use.
          #
          # For explanations see
          # http://dev.mysql.com/doc/mysql/en/server-system-variables.html

          # Here is entries for some specific programs
          # The following values assume you have at least 32M ram

          [mysqld]
          #
          # * Basic Settings
          #
          user            = mysql
          # pid-file      = /var/run/mysqld/mysqld.pid
          # socket        = /var/run/mysqld/mysqld.sock
          # port          = 3306
          # datadir       = /var/lib/mysql

          performance_schema = off

          # If MySQL is running as a replication slave, this should be
          # changed. Ref https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmpdir
          # tmpdir                = /tmp
          #
          # Instead of skip-networking the default is now to listen only on
          # localhost which is more compatible and is not less secure.
          bind-address            = 127.0.0.1
          #
          # * Fine Tuning
          #
          key_buffer_size         = 16M
          # max_allowed_packet    = 64M
          # thread_stack          = 256K

          # thread_cache_size       = -1

          # This replaces the startup script and checks MyISAM tables if needed
          # the first time they are touched
          myisam-recover-options  = BACKUP

          # max_connections        = 151

          # table_open_cache       = 4000

          #
          # * Logging and Replication
          #
          # Both location gets rotated by the cronjob.
          #
          # Log all queries
          # Be aware that this log type is a performance killer.
          # general_log_file        = /var/log/mysql/query.log
          # general_log             = 1
          #
          # Error log - should be very few entries.
          #
          log_error = /var/log/mysql/error.log
          #
          # Here you can see queries with especially long duration
          # slow_query_log                = 1
          # slow_query_log_file   = /var/log/mysql/mysql-slow.log
          # long_query_time = 2
          # log-queries-not-using-indexes
          #
          # The following can be used as easy to replay backup logs or for replication.
          # note: if you are setting up a replication slave, see README.Debian about
          #       other settings you may need to change.
          # server-id             = 1
          # log_bin                       = /var/log/mysql/mysql-bin.log
          # binlog_expire_logs_seconds    = 2592000
          max_binlog_size   = 100M
          # binlog_do_db          = include_database_name
          # binlog_ignore_db      = include_database_name

    - name: PHP - Disable mail()
      lineinfile:
        path: /etc/php/7.4/fpm/php.ini
        regexp: "^disable_functions ="
        line: "disable_functions = mail,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,"

    - name: PHP - Set cgi.fix_pathinfo=0
      lineinfile:
        path: /etc/php/7.4/fpm/php.ini
        regexp: "^cgi.fix_pathinfo|;cgi.fix_pathinfo"
        line: cgi.fix_pathinfo=0

    - name: PHP - Disable opcache
      lineinfile:
        path: /etc/php/7.4/fpm/php.ini
        regexp: "^opcache.enable|;opcache.enable"
        line: opcache.enable=0

    - name: Restart PHP
      service:
        name: php7.4-fpm
        state: restarted

    - name: Setup Nginx config
      copy:
        dest: /etc/nginx/sites-enabled/default
        content: |
          server {
            listen 80 default_server;
            listen [::]:80 default_server;

            root /var/www/html;

            # Add index.php to the list if you are using PHP
            index index.php index.html index.htm index.nginx-debian.html;

            server_name _;

            location / {
              # First attempt to serve request as file, then
              # as directory, then fall back to displaying a 404.
              try_files $uri $uri/ /index.php?$args =404;
            }

            # Add trailing slash to */wp-admin requests.
            rewrite /wp-admin$ $scheme://$host$uri/ permanent;

            # pass PHP scripts to FastCGI server
            location ~ \.php$ {
              include snippets/fastcgi-php.conf;

              # With php-fpm (or other unix sockets):
              fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
            }

            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
              expires max;
              log_not_found off;
            }

            # deny access to .htaccess files, if Apache's document root
            # concurs with nginx's one
            #
            location ~ /\.ht {
              deny all;
            }
          }

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Install phpinfo script
      copy:
        dest: /var/www/html/index.php
        owner: www-data
        group: www-data
        mode: 0644
        content: |
          <?php
            phpinfo();
          ?>
